
/* Controltag Loader for Turner */
(function(){
  function loadCT(url, callback) {
    if (window.console) { console.info('Loading Krux control tag.'); }
    var ct_element = document.createElement('script');
    ct_element.async = true;
    ct_element.src = url;

    ct_element.onload = ct_element.onreadystatechange = function() {
      var state = ct_element.readyState;
      if (!callback.done && (!state || /loaded|complete/.test(state))) {
        callback.done = true;
        callback();
      }
    };

    // Fetch the first script element, so we can insert the
    // controltag before it. There *must* be at least one
    // script element, or this code would never be called
    var sibling = document.getElementsByTagName('script')[0];
    sibling.parentNode.insertBefore(ct_element, sibling);
  };

  function loadConfig() {
    
    
    if (window.console) { console.info('Loading krux configuration.'); }
    Krux( 'config', {"confid": "ITb_4eqO", "context_terms": [], "dnt": null, "geo":{"COUNTRY":"US", "REGION":"FL", "CITY":"VENICE", "GEOREGION":"251", "DMA":"539", "PMSA":"", "AREACODE":"941", "COUNTY":"SARASOTA", "FIPS":"12115", "LATITUDE":"27.0503", "LONGITUDE":"-82.3906", "TIMEZONE":"EST", "ZIP":"34284-34285 34292-34293", "CONTINENT":"NA"}, "params": {"beacon_host": "beacon.krxd.net", "capture_js_errors": "true", "capture_leakage": true, "client_side_storage": "localStorage,cookie", "context_terms": "false", "control_tag_namespace": null, "control_tag_pixel_throttle": null, "control_tag_stats_prefix": null, "control_tag_version": "stable", "datatag_version": "3", "jslog_host": "jslog.krxd.net", "max_slot_time": 1000, "no_pii": 0, "revenue_optimization": false, "services_host": "apiservices.krxd.net", "site_level_supertag_config": "site", "supertag_requires_approval": false}, "partner_segment_map": {}, "publisher": {"id": 11621, "name": "Turner", "uuid": "e9eaedd3-c1da-4334-82f0-d7e3ff883c87"}, "realtime_segments": [{"id": "n0c7ap7lr", "test": ["and", ["or", ["and", ["or", ["intersects", "$page_attr_cnn_site", "[\"cnn\"]"]], ["and", ["intersects", "$page_attr_cnn_rollup", "[\"health\"]"], ["intersects", "$page_attr_cnn_section", "[\"expert_qa\"]"]]]]]}], "segments": [], "services": {"data": "//beacon.krxd.net/data.gif", "event": "//beacon.krxd.net/event.gif", "log": "//jslog.krxd.net/jslog.gif", "pixel": "//beacon.krxd.net/pixel.gif", "social": "//beacon.krxd.net/social.gif", "stats": "//apiservices.krxd.net/stats", "um": "//apiservices.krxd.net/um", "userData": "//apiservices.krxd.net/user_data/segments/3"}, "site": {"id": 13687, "name": "CNN"}, "tags": [{"content": "<script type=\"text/javascript\">\r\n// DFP premium\r\n(function(require) {\r\n  var store = require('store');\r\n  var _ = require('util');  \r\n  var segments;\r\n  \r\n  function handleUserDataResponse(r) {\r\n    // Handle the response as usual.\r\n    segments.handleUserDataResponse(r);\r\n    \r\n    // Override localStorage.kxuser with a case-insensitive value for DFP premium.\r\n    // This will get read by the interchange direct snippet for Krux.user\r\n    // and Krux.dfpKeyValues\r\n    if(r.kuid_long) {\r\n      store.set('user', r.kuid_long, store.DAYS*30);\r\n    }\r\n  }\r\n  \r\n  // Our own fetch uses our own handleResponse\r\n  function fetch() {\r\n    var options = {\r\n      url: _.get('url_userData'),\r\n      data: {pubid: _.get('pubid')},\r\n      callback: 'kxjsonp_userData',\r\n      done: handleUserDataResponse\r\n    };\r\n    if(!segments.readTechFromStore()) {\r\n      options.data.technographics = 1;\r\n    }\r\n    require('http').jsonp(options);  \r\n  }\r\n  \r\n  \r\n  if(!store.get('segWait')) {\r\n    // disable segments.fetch and use our own\r\n    _.set('segWait', 1, store.MINUTES*5);\r\n    _.onOnce('dom:load', fetch);\r\n    _.fire('user_data_fetch_scheduled');\r\n  }\r\n  \r\n  // Finally, require segments as usual.\r\n  segments = require('segments');\r\n}(Krux.require));\r\n</script>", "content_type": "html", "docwrite": null, "execution_results": null, "id": 20614, "internal": 1, "library_tag_config": {}, "method": "document", "name": "Krux Load Segments", "require": "", "target": "", "target_action": null, "tier": 2, "timing": "asap", "type": "library"}, {"content": "<script>\r\n// this tag is intentionally blank\r\n</script>", "content_type": "html", "docwrite": null, "execution_results": null, "freq_cap": 3, "id": 20466, "internal": 6, "method": "document", "name": "Technographic Data provider tag", "require": "", "target": null, "target_action": "append", "tier": 1, "timing": "onload", "type": "data provider"}, {"content": "", "content_type": "html", "docwrite": null, "execution_results": null, "freq_cap": 3, "id": 20467, "internal": 14, "method": "document", "name": "Krux Geographic Data provider tag", "require": "", "target": null, "target_action": "append", "tier": 1, "timing": "onload"}, {"content": "<script class=\"krux-dtc\">\r\n(function() {\r\n  window.Krux||((Krux=function(){Krux.q.push(arguments);}).q=[]);;\r\n  Krux.turnerDataTransfer = function() {\r\n    /*\r\n    Parse ad call\r\n    */\r\n\r\n    var attrs, el, els, find, i, key, keys, lookFor, m, match, ns, parts, pixel, site, size, sizes, _, _i, _len, _ref;\r\n    sizes = [\"728x90\", \"300x250\", \"336x280\", \"160x600\", \"336x850\", \"300x600\", \"custom_rgt\", \"970x66\"];\r\n    _ = Krux._;\r\n    find = Krux('require:sizzle').find;\r\n    el = null;\r\n    while (sizes.length && (el == null)) {\r\n      size = sizes.pop();\r\n      els = find(\"*[src*=_pos=\" + size + \"], *[src*=_position=\" + size + \"]\");\r\n      el = els[0];\r\n    }\r\n    if (el) {\r\n      m = el.src.match(/\\.ng\\/(site=.*)$/);\r\n      if (!m) {\r\n        return;\r\n      }\r\n      attrs = Krux('require:util').parseKeyValues(m[1]);\r\n      site = attrs.site;\r\n      if (!site) {\r\n        return;\r\n      }\r\n      Krux('set', \"page_attr_\" + site + \"_site\", site);\r\n      Krux('set', \"page_attr_\" + site + \"_pagetype\", attrs[\"\" + site + \"_pagetype\"]);\r\n      Krux('set', \"page_attr_\" + site + \"_rollup\", attrs[\"\" + site + \"_rollup\"]);\r\n      Krux('set', \"page_attr_\" + site + \"_pos\", attrs[\"\" + site + \"_pos\"]);\r\n      Krux('set', \"page_attr_\" + site + \"_position\", attrs[\"\" + site + \"_position\"]);\r\n      Krux('set', \"page_attr_\" + site + \"_section\", attrs[\"\" + site + \"_section\"]);\r\n      Krux('set', \"page_attr_\" + site + \"_subsection\", attrs[\"\" + site + \"_subsection\"]);\r\n      Krux('set', \"section\", attrs[\"\" + site + \"_rollup\"]);\r\n      Krux('set', \"subsection\", attrs[\"\" + site + \"_section\"]);\r\n    }\r\n    /*\r\n    Parse metrics pixel\r\n    */\r\n\r\n    ns = (function() {\r\n      var exceptions, jsmdmap, key1, key2, val1, val2, _ref;\r\n      if (window._jsmd_default) {\r\n        jsmdmap = _jsmd_default.map;\r\n        for (key1 in jsmdmap) {\r\n          val1 = jsmdmap[key1];\r\n          for (key2 in val1) {\r\n            val2 = val1[key2];\r\n            if (ns = val2 != null ? (_ref = val2.settings) != null ? _ref.visitorNamespace : void 0 : void 0) {\r\n              return ns;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      exceptions = {\r\n        'NBA': 'nbagroup',\r\n        'Nascar': 'nascardigitalsap',\r\n        'Bleacher Report': 'turnersidigital'\r\n      };\r\n      return exceptions[Krux('get', 'site')];\r\n    })();\r\n    if (!ns) {\r\n      return;\r\n    }\r\n    lookFor = \"&h1=(.*?)&\";\r\n    i = 0;\r\n    pixel = window[\"s_i_\" + ns];\r\n    while (pixel && !(match = (_ref = pixel.src) != null ? _ref.match(lookFor) : void 0)) {\r\n      i++;\r\n      pixel = window[\"s_i_\" + ns + \"_\" + i];\r\n    }\r\n    if (match) {\r\n      parts = decodeURIComponent(match[1]).split('|');\r\n      keys = ['lob', 'brand', 'bizunit', 'sitename', 'sitesectionlevel1', 'sitesectionlevel2'];\r\n      for (i = _i = 0, _len = keys.length; _i < _len; i = ++_i) {\r\n        key = keys[i];\r\n        Krux('set', \"page_attr_\" + site + \"_\" + key, parts[i]);\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  Krux.turnerDataTransfer();\r\n\r\n}).call(this);\r\n \r\n</script>", "content_type": "html", "docwrite": null, "execution_results": {"docwrite": false, "listeners": [], "onloadSafe": true}, "id": 22546, "internal": 1, "method": "document", "name": "Data Transfer Code", "require": "", "target": "", "target_action": null, "tier": 1, "timing": "onready", "type": "publisher"}]} );
    
  };

  loadCT( "//cdn.krxd.net/ctjs/controltag.js.8d3bee8c7187eef6171bab2ef474f38d", loadConfig );
})();
